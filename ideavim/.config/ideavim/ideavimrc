"" Inspiration
""" -----------------------------------------
" - https://github.com/skubakdj/intellimacs
" - https://github.com/megawubs/dotfiles/blob/main/dot_ideavimrc
" More examples:     https://jb.gg/share-ideavimrc
""" -----------------------------------------

let mapleader=' '
""" Options  --------------------------------

set number
set relativenumber
set incsearch
set ignorecase
set smartcase
set hlsearch
set visualbell
set noerrorbells
set ideajoin
set idearefactormode=keep
set scrolloff=3
set history=100000
set clipboard=unnamed
set which-key
set highlightedyank
set notimeout

set argtextobj            " provides a text-object 'a' (argument)
set textobj-entire        " provides a text-object e (entire buffer)
set textobj-indent        " provides a text-object for i (indentation level)

" tab
set expandtab
set smarttab

""" Plugins  --------------------------------
set surround
set multiple-cursors
set commentary
set NERDTree

" Plugins Config
let g:WhichKey_FontSize = 16
let g:highlightedyank_highlight_duration = "300"
let g:highlightedyank_highlight_color = "rgba(160, 160, 160, 155)"

""" ------------------------------------------

" Visual indentation
vnoremap < <gv
vnoremap > >gv

" (Tab switch)
map <S-Tab> <Action>(PreviousTab)
map <Tab> <Action>(NextTab)

" Popup navigation
map <c-j> <Action>(PopupMenu-selectnext)
map <c-k> <Action>(PopupMenu-selectprev)

map <C-\> <Action>(SplitVertically)
map <C--> <Action>(SplitHorizontally)
map <C-BS> <Action>(Unsplit)

map <M-k> <Action>(MoveLineUp)
map <M-j> <Action>(MoveLineDown)

" clear the highlighted search result
nnoremap <BS><BS> :noh<CR>

nnoremap <C-C> <Esc>

nnoremap <leader>? :action GotoAction<CR>

" Quit visual mode
vnoremap v <Esc>

" Move to the start of line
nnoremap H ^

" Move to the end of line
nnoremap L $

" Redo
nnoremap U <C-r>

" Yank to the end of line
nnoremap Y y$

" Goto
map gA <Action>(GotoAction)
map ga <Action>(ShowIntentionActions)
map gf <Action>(ShowUsages)
map gF <Action>(FindUsages)
map gd <Action>(GotoDeclaration)
map gH <Action>(QuickActions)
map gh <Action>(QuickJavaDoc)
map gi <Action>(GotoImplementation)
map gr <Action>(RefactoringMenu)
map gtd <Action>(GotoTypeDeclaration)
map gtt <Action>(GotoTest)
map gu <Action>(GotoSuperMethod)
map gn <Action>(ShowNavBar)
map g; <Action>(JumpToLastChange)
map g, <Action>(JumpToNextChange)


" []
nmap [b <Action>(PreviousTab)
nmap ]b <Action>(NextTab)
nmap [c <Action>(JumpToLastChange)
nmap ]c <Action>(JumpToNextChange)
nmap ]e <action>(GotoNextError)
nmap [e <action>(GotoPreviousError)
nmap [m <Action>(MethodUp)
nmap ]m <Action>(MethodDown)
nmap [o <Action>(PreviousOccurence)
nmap ]o <Action>(NextOccurence)
nmap [u <Action>(GotoPrevElementUnderCaretUsage)
nmap ]u <Action>(GotoNextElementUnderCaretUsage)

" Window operation
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k


" ==================================================
" Show all the provided actions via `:actionlist`
" ==================================================

" built in search looks better
nnoremap / :action Find<CR>

" but preserve ideavim search
nnoremap <leader>/ /

nnoremap <leader>* viw:action FindInPath<CR>

nnoremap <leader><C-e> :edit ~/.config/ideavim/ideavimrc<CR>
map <leader><C-r> <Action>(IdeaVim.ReloadVimRc.reload)

let g:WhichKeyDesc_Windows = "<leader>w Windows"
nnoremap <leader>ww <C-W>w
nnoremap <leader>wd <C-W>c
nnoremap <leader>wj <C-W>j
nnoremap <leader>wk <C-W>k
nnoremap <leader>wh <C-W>h
nnoremap <leader>wl <C-W>l
nnoremap <leader>ws <C-W>s
nnoremap <leader>w- <C-W>s
nnoremap <leader>wv <C-W>v
nnoremap <leader>w\| <C-W>v

" quit ==> close current window
" buffer (buffer < window < tab)
let g:WhichKeyDesc_Close = "<leader>x Close"
map <leader>xx <Action>(CloseContent)
nmap <leader>xa <Action>(CloseAllEditors)
nmap <leader>xo <Action>(CloseAllEditorsButActive)
nmap <leader>xp <Action>(CloseAllUnpinnedEditors)

let g:WhichKeyDesc_Code = "<leader>c Code"
nnoremap <leader>cc :action SilentCodeCleanup<CR>:action ReformatCode<CR>:action OptimizeImports<CR>
nnoremap <leader>cf :action ReformatCode<CR>
nnoremap <leader>co :action OptimizeImports<CR>
nnoremap <leader>ch :action CallHierarchy<CR>
nnoremap <leader>ci :action InspectCode<CR>

nnoremap <leader>= <Action>(SilentCodeCleanup)<Action>(ReformatCode)<Action>(OptimizeImports)
vnoremap <leader>= <Action>(ReformatCode)

""" Bookmarks
let g:WhichKeyDesc_bookmarks = "<leader>b Bookmarks"
map <leader>bb <Action>(ToggleBookmark)
let g:WhichKeyDesc_bookmarks_toggle_bookmark = "<leader>bb Toggle Bookmark"
map <leader>be <Action>(EditBookmark)
let g:WhichKeyDesc_bookmarks_edit = "<leader>be Edit Bookmark"
map <leader>bt <Action>(ActivateBookmarksToolWindow)
let g:WhichKeyDesc_bookmarks_tool = "<leader>bt Bookmark Tool"
map <leader>bm <Action>(Bookmarks)
let g:WhichKeyDesc_bookmarks_menu = "<leader>bm Bookmark Menu"
map <leader>bn <Action>(GotoNextBookmark)
let g:WhichKeyDesc_bookmarks_next = "<leader>bn Next Bookmark"
map <leader>bp <Action>(GotoPreviousBookmark)
let g:WhichKeyDesc_bookmarks_prev = "<leader>bp Previous Bookmark"
map <leader>bs <Action>(ShowBookmarks)
let g:WhichKeyDesc_bookmarks_show = "<leader>bs Show Bookmarks"

let g:WhichKeyDesc_menu = "<leader>m Menu"
nnoremap <leader>mm :action MainMenu<CR>
nnoremap <leader>mp :action ShowPopup<CR>
map <C-m> <Action>(ShowPopupMenu)


""" Debugging
let g:WhichKeyDesc_debugging = "<leader>d Debugging"
map <leader>dd <Action>(ToggleLineBreakpoint)
let g:WhichKeyDesc_debugging_toggle_breakpoint = "<leader>dd Toggle Break Point"
map <leader>dt <Action>(ActivateDebugToolWindow)
let g:WhichKeyDesc_debugging_tool = "<leader>dt Tool"
map <leader>de <Action>(EditBreakpoint)
let g:WhichKeyDesc_debugging_edit_breakpoint = "<leader>de Edit Breakpoint"
map <leader>do <Action>(StepOver)
let g:WhichKeyDesc_debugging_step_over = "<leader>do Step Over"
map <leader>di <Action>(StepInto)
let g:WhichKeyDesc_debugging_step_into = "<leader>di Step Into"
map <leader>dr <Action>(EvaluateExpression)
let g:WhichKeyDesc_debugging_repl = "<leader>dr Repl (Evaluate)"
map <leader>dC <Action>(RunToCursor)
let g:WhichKeyDesc_debugging_run_to_cursor = "<leader>dC Run To Cursor"
map <leader>dc <Action>(Resume)
let g:WhichKeyDesc_debugging_resume = "<leader>dc Resume"
map <leader>dm <Action>(XDebugger.MuteBreakpoints)
let g:WhichKeyDesc_debugging_mute = "<leader>dm Mute"
map <leader>dq <Action>(Stop)
let g:WhichKeyDesc_debugging_stop = "<leader>dq Stop"

let g:WhichKeyDesc_files = "<leader>f Files"
nmap <leader>fe :action RecentLocations<CR>
nmap <leader>fr :action RecentFiles<CR>
nmap <leader>fx :action CloseEditor<CR>
nmap <leader>fw :action Switcher<CR>
nmap <leader>fd :action NewScratchBuffer<CR>
nmap <leader>fs :action SaveDocument<CR>
nmap <leader>fa :action SelectInProjectView<CR>
nmap <leader>fX :action CloseAllEditorsButActive<CR>


""" Run
let g:WhichKeyDesc_run = "<leader>r Run"
map <leader>rn <Action>(RunClass)
let g:WhichKeyDesc_run_class = "<leader>rn Run Class"
map <leader>rc <Action>(ChooseRunConfiguration)
let g:WhichKeyDesc_run_choose_configuration = "<leader>rc Run Configuration"
map <leader>rs <Action>(Stop)
let g:WhichKeyDesc_run_stop = "<leader>rs Stop"
map <leader>rq <Action>(Stop)
let g:WhichKeyDesc_run_stop = "<leader>rq Stop"
map <leader>rr <Action>(Rerun)
let g:WhichKeyDesc_run_rerun = "<leader>rr Rerun"
map <leader>rd <Action>(DebugClass)
let g:WhichKeyDesc_run_debug = "<leaderrd Debug Nearest"
map <leader>rh <Action>(ImportTests)
let g:WhichKeyDesc_run_import_tests = "<leader>rh Test History"
map <leader>rm <Action>(RunMenu)
let g:WhichKeyDesc_run_menu = "<leader>rm Menu"
map <leader>rf <Action>(RerunFailedTests)
let g:WhichKeyDesc_run_failed = "<leader>rf Rerun Failed"
map <leader>rt <Action>(ActivateRunToolWindow)
let g:WhichKeyDesc_run_tool = "<leader>rf Tool"
map <leader>ra <Action>(RunAnything)
let g:WhichKeyDesc_run_tool = "<leader>ra Run Anything..."

""" View mode
let g:WhichKeyDesc_view = "<leader>v View"
map <leader>vf <Action>(ToggleFullScreen)
let g:WhichKeyDesc_view_fullscreen = "<leader>vc Full Screen"
map <leader>vc <Action>(ChangeView)
let g:WhichKeyDesc_view_change = "<leader>vc Change View"
map <leader>vv <Action>(ToggleDistractionFreeMode)
let g:WhichKeyDesc_view_distraction = "<leader>vv Distraction Mode"
map <leader>vp <Action>(TogglePresentationMode)
let g:WhichKeyDesc_view_presentation = "<leader>vm Presentation Mode"
map <leader>vm <Action>(ViewMenu)
let g:WhichKeyDesc_view_menu = "<leader>vm Menu"
map <leader>vx <Action>(Unsplit)
let g:WhichKeyDesc_view_unsplit = "<leader>vx Unsplit"
map <leader>vX <Action>(UnsplitAll)
let g:WhichKeyDesc_view_unsplit_all = "<leader>vX UnsplitAll"

map <C-z> <Action>(ToggleDistractionFreeMode)

""" Git
let g:WhichKeyDesc_git = "<leader>g Git"
map <leader>gg <Action>(CheckinProject)
let g:WhichKeyDesc_git_checkin = "<leader>gg Checkin"
map <leader>gc <Action>(Git.Branches)
let g:WhichKeyDesc_git_branches = "<leader>gc Branches"
map <leader>gp <Action>(Git.Commit.And.Push.Executor)
let g:WhichKeyDesc_git_commit_and_push = "<leader>gp Commit & Push"
map <leader>gP <Action>(Vcs.Push)
let g:WhichKeyDesc_git_push = "<leader>gP Push"
map <leader>gm <Action>(VcsGroups)
let g:WhichKeyDesc_git_menu = "<leader>gm Menu"
map <leader>gf <Action>(Git.Fetch)
let g:WhichKeyDesc_git_fetch = "<leader>gf Fetch"
map <leader>ga <Action>(Annotate)
let g:WhichKeyDesc_git_annotate = "<leader>ga Annotate"
map <leader>gl <Action>(ActivateVersionControlToolWindow)
let g:WhichKeyDesc_git_log = "<leader>gl Log"
map <leader>gt <Action>(ActivateVersionControlToolWindow)
let g:WhichKeyDesc_git_tool = "<leader>gt Tool"
map <leader>gr <Action>(Vcs.RollbackChangedLines)
let g:WhichKeyDesc_git_rollback_changed_lines = "<leader>gr Rollback"
map <leader>go <Action>(Github.View.Pull.Request)
let g:WhichKeyDesc_git_open_pull_requests = "<leader>go Open Pull Requests"

""" Search
let g:WhichKeyDesc_search = "<leader>s Search"
map <leader>se <Action>(SearchEverywhere)
let g:WhichKeyDesc_search_everywhere = "<leader>se Everywhere"
map <leader>sr <Action>(RecentFiles)
let g:WhichKeyDesc_search_recent_files = "<leader>sr Recent Files"
map <leader>sc <Action>(GotoClass)
let g:WhichKeyDesc_search_class = "<leader>sc Class"
map <leader>sf <Action>(GotoFile)
let g:WhichKeyDesc_search_files = "<leader>sf Files"
map <leader>ss <Action>(GotoSymbol)
let g:WhichKeyDesc_search_symbols = "<leader>ss Symbols"
map <leader>sa <Action>(GotoAction)
let g:WhichKeyDesc_search_action = "<leader>sa Action"
map <leader>st <Action>(FindInPath)
let g:WhichKeyDesc_search_in_path = "<leader>st In Path"
map <leader>su <Action>(FindUsages)
let g:WhichKeyDesc_search_usages = "<leader>suUsages"
map <leader>sp <Action>(RecentProjectListGroup)
let g:WhichKeyDesc_search_projects = "<leader>sp Usages"
map <leader>sR <Action>(ReplaceInPath)
let g:WhichKeyDesc_search_replace = "<leader>sR Replace"

""" Language
let g:WhichKeyDesc_language = "<leader>l Language"
map <leader>lm <Action>(Refactorings.QuickListPopupAction)
let g:WhichKeyDesc_language_menu = "<leader>lm Menu"
map <leader>lr <Action>(RenameElement)
let g:WhichKeyDesc_language_rename = "<leader>lr Rename"
map <leader>lc <Action>(ChangeSignature)
let g:WhichKeyDesc_language_change_signature = "<leader>lc Change Signature"
map <leader>lv <Action>(IntroduceVariable)
let g:WhichKeyDesc_language_introduce_variable = "<leader>lv Introduce Variable"
map <leader>li <Action>(Inline)
let g:WhichKeyDesc_language_inline = "<leader>li Inline"
map <leader>lf <Action>(ReformatCode)<Action>(SilentCodeCleanup)
let g:WhichKeyDesc_language_reformat = "<leader>lf Format"


""" Application
let g:WhichKeyDesc_Applications = "<leader>a Applications"

" Plugins screen
let g:WhichKeyDesc_Applications_Plugins = "<leader>ak plugins"
nnoremap <leader>ak    :action WelcomeScreen.Plugins<CR>
vnoremap <leader>ak    :action WelcomeScreen.Plugins<CR>

" Show TODOs
let g:WhichKeyDesc_Applications_Org = "<leader>ao +org"
let g:WhichKeyDesc_Applications_Org_Todo = "<leader>aot todo"
nnoremap <leader>aot    :action ActivateTODOToolWindow<CR>
vnoremap <leader>aot    :action ActivateTODOToolWindow<CR>

" Show cpu usage
let g:WhichKeyDesc_Applications_ActivityMonitor = "<leader>aP activity-monitor"
nnoremap <leader>aP    :action Performance.ActivityMonitor<CR>
vnoremap <leader>aP    :action Performance.ActivityMonitor<CR>

" List processes
let g:WhichKeyDesc_Applications_Processes = "<leader>ap processes"
nnoremap <leader>ap    :action ShowProcessWindow<CR>
vnoremap <leader>ap    :action ShowProcessWindow<CR>

" Open a new terminal window
let g:WhichKeyDesc_Applications_Shell = "<leader>as shell"
nnoremap <leader>as    :action Terminal.OpenInTerminal<CR>
vnoremap <leader>as    :action Terminal.OpenInTerminal<CR>

"" Config
let g:WhichKeyDesc_config = "<leader>, Config"
let g:WhichKeyDesc_config_vim = "<leader>,v Vim"
map <leader>,va <Action>(VimFindActionIdAction)
let g:WhichKeyDesc_config_vim_actions = "<leader>,va Vim Toggle Action Id's"
map <leader>,vv <Action>(VimPluginToggle)
let g:WhichKeyDesc_config_vim_toggle = "<leader>,vv Toggle Vim"
map <leader>,cc <Action>(ChangeColorScheme)
let g:WhichKeyDesc_config_change_color_scheme = "<leader>,cc Change Color Scheme"
map <leader>,ce :edit ~/.config/ideavim/ideavimrc<CR>
let g:WhichKeyDesc_config_edit = "<leader>,ce Config edit"
map <leader>,cr <Action>(IdeaVim.ReloadVimRc.reload)
let g:WhichKeyDesc_config_reload = "<leader>,cr Config reload"

"" Doubts
" nnoremap <leader>is    :action InsertLiveTemplate<CR>a
" vnoremap <leader>is    <esc>:action insertlivetemplate<cr>a
