"" Inspiration
""" -----------------------------------------
" - https://github.com/skubakdj/intellimacs
" - https://github.com/megawubs/dotfiles/blob/main/dot_ideavimrc
" More examples:     https://jb.gg/share-ideavimrc
""" -----------------------------------------

let mapleader=' '

""" Options  --------------------------------
" Fixed the problem that p paste cannot import class automatically, https://youtrack.jetbrains.com/issue/VIM-25/VIM-code-paste-should-be-smarter
set clipboard=unnamedplus,ideaput
set highlightedyank
set history=100000
set hlsearch
set ideajoin
set idearefactormode=keep
set ignorecase
set incsearch
set noerrorbells
set notimeout
set number
set scrolloff=3
set smartcase
set visualbell
set which-key

" tab
set expandtab
set smarttab

set argtextobj            " provides a text-object 'a' (argument)
set textobj-entire        " provides a text-object e (entire buffer)
set textobj-indent        " provides a text-object for i (indentation level)

""" Plugins  --------------------------------
set surround
set multiple-cursors
set commentary
set NERDTree

" Plugins Config
let g:WhichKey_FontSize = 16
let g:WhichKey_FontFamily = "Jetbrains Mono"
let g:WhichKey_SortCaseSensitive = "false"
let g:highlightedyank_highlight_duration = "300"
let g:highlightedyank_highlight_color = "rgba(160, 160, 160, 155)"

""" ------------------------------------------

" (Tab switch)
map <S-Tab> <Action>(PreviousTab)
map <Tab> <Action>(NextTab)

" Popup navigation
map <c-j> <Action>(PopupMenu-selectnext)
map <c-k> <Action>(PopupMenu-selectprev)
imap <C-y> <Action>(EditorChooseLookupItem)

map <C-\> <Action>(SplitVertically)
map <C--> <Action>(SplitHorizontally)
map <C-BS> <Action>(Unsplit)
nmap <C-C> <Esc>
map <C-s> <Action>(ReformatCode) \| <Action>(SaveAll)

nmap <C-i>    <Action>(Forward)
nmap <C-o>    <Action>(Back)

map <M-k> <Action>(MoveLineUp)
map <M-j> <Action>(MoveLineDown)

" clear the highlighted search result
nmap <BS><BS> :noh<CR>

" Move to the start of line
nmap H ^

" Move to the end of line
nmap L $

" Redo
nmap U <C-r>

" Yank to the end of line
nmap Y y$

nmap K <Action>(ShowHoverInfo)

nmap <leader>? <Action>(GotoAction)


" Visual indentation
vnoremap < <gv
vnoremap > >gv

" Quit visual mode
vnoremap v <Esc>

" built in search looks better
nmap / <Action>(Find)

" but preserve ideavim search
nnoremap <leader>/ /

nmap <leader>* viw<Action>(FindInPath)

nmap <leader><C-e> :edit ~/.config/ideavim/ideavimrc<CR>
map <leader><C-r> <Action>(IdeaVim.ReloadVimRc.reload)

""" Goto  --------------------------------
map gA <Action>(GotoAction)
map ga <Action>(ShowIntentionActions)
map gf <Action>(ShowUsages)
map gF <Action>(FindUsages)
map gd <Action>(GotoDeclaration)
map gy <Action>(GotoTypeDeclaration)
map gH <Action>(QuickActions)
map gh <Action>(QuickJavaDoc)
map gI <Action>(GotoImplementation)
map gR <Action>(GotoRelated)
map gr <Action>(RefactoringMenu)
map gtt <Action>(GotoTest)
map gu <Action>(GotoSuperMethod)
map gn <Action>(ShowNavBar)
map g; <Action>(JumpToLastChange)
map g, <Action>(JumpToNextChange)

""" []  --------------------------------
nmap [b <Action>(PreviousTab)
nmap ]b <Action>(NextTab)
nmap [c <Action>(JumpToLastChange)
nmap ]c <Action>(JumpToNextChange)
nmap ]e <Action>(GotoNextError)
nmap [e <Action>(GotoPreviousError)
nmap [m <Action>(MethodUp)
nmap ]m <Action>(MethodDown)
nmap [o <Action>(PreviousOccurence)
nmap ]o <Action>(NextOccurence)
nmap [u <Action>(GotoPrevElementUnderCaretUsage)
nmap ]u <Action>(GotoNextElementUnderCaretUsage)

" Previous Todo Comment
nmap [t ?TODO<cr>
" Next Todo Comment
nmap ]t /TODO<cr>

""" Window navigation  --------------------------------
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k

""" Close --------------------------------
let g:WhichKeyDesc_Close = "<leader>x Close"
map <leader>xx <Action>(CloseContent)
nmap <leader>xa <Action>(CloseAllEditors)
nmap <leader>xo <Action>(CloseAllEditorsButActive)
nmap <leader>xp <Action>(CloseAllUnpinnedEditors)

""" Code --------------------------------
let g:WhichKeyDesc_Code = "<leader>c Code"
nmap <leader>ca <Action>(ShowIntentionActions)
nmap <leader>cc <Action>(SilentCodeCleanup) \| <Action>(ReformatCode) \| <Action>(OptimizeImports)
nmap <leader>ce <Action>(CodeInspection.OnEditor)
nmap <leader>cf <Action>(ReformatCode)
nmap <leader>ch <Action>(CallHierarchy)
nmap <leader>ci <Action>(InspectCode)
nmap <leader>co <Action>(OptimizeImports)
nmap <leader>cg <Action>(Generate)


"" Maven
nmap <leader>cmr <Action>(Maven.Reimport)

""" Format --------------------------------
nmap <leader>= <Action>(SilentCodeCleanup) \| <Action>(ReformatCode) \| <Action>(OptimizeImports)
vmap <leader>= <Action>(ReformatCode)

""" Bookmarks --------------------------------
let g:WhichKeyDesc_bookmarks = "<leader>b Bookmarks"
map <leader>bb <Action>(ToggleBookmark)
let g:WhichKeyDesc_bookmarks_toggle_bookmark = "<leader>bb Toggle Bookmark"
map <leader>be <Action>(EditBookmark)
let g:WhichKeyDesc_bookmarks_edit = "<leader>be Edit Bookmark"
map <leader>bt <Action>(ActivateBookmarksToolWindow)
let g:WhichKeyDesc_bookmarks_tool = "<leader>bt Bookmark Tool"
map <leader>bm <Action>(Bookmarks)
let g:WhichKeyDesc_bookmarks_menu = "<leader>bm Bookmark Menu"
map <leader>bn <Action>(GotoNextBookmark)
let g:WhichKeyDesc_bookmarks_next = "<leader>bn Next Bookmark"
map <leader>bp <Action>(GotoPreviousBookmark)
let g:WhichKeyDesc_bookmarks_prev = "<leader>bp Previous Bookmark"
map <leader>bs <Action>(ShowBookmarks)
let g:WhichKeyDesc_bookmarks_show = "<leader>bs Show Bookmarks"

""" Menu --------------------------------
let g:WhichKeyDesc_menu = "<leader>m Menu"
nmap <leader>mm <Action>(MainMenu)
nmap <leader>mp <Action>(ShowPopup)
map <C-m> <Action>(ShowPopupMenu)

""" Debugging --------------------------------
let g:WhichKeyDesc_debugging = "<leader>d Debugging"
map <leader>dd <Action>(ToggleLineBreakpoint)
let g:WhichKeyDesc_debugging_toggle_breakpoint = "<leader>dd Toggle Break Point"
map <leader>dt <Action>(ActivateDebugToolWindow)
let g:WhichKeyDesc_debugging_tool = "<leader>dt Tool"
map <leader>de <Action>(EditBreakpoint)
let g:WhichKeyDesc_debugging_edit_breakpoint = "<leader>de Edit Breakpoint"
map <leader>dE <Action>(ViewBreakpoints)
let g:WhichKeyDesc_debugging_edit_all_breakpoints = "<leader>dE Edit All Breakpoints"
map <leader>do <Action>(StepOver)
let g:WhichKeyDesc_debugging_step_over = "<leader>do Step Over"
map <leader>di <Action>(StepInto)
let g:WhichKeyDesc_debugging_step_into = "<leader>di Step Into"
map <leader>dr <Action>(EvaluateExpression)
let g:WhichKeyDesc_debugging_repl = "<leader>dr Repl (Evaluate)"
map <leader>dC <Action>(RunToCursor)
let g:WhichKeyDesc_debugging_run_to_cursor = "<leader>dC Run To Cursor"
map <leader>dc <Action>(Resume)
let g:WhichKeyDesc_debugging_resume = "<leader>dc Resume"
map <leader>dm <Action>(XDebugger.MuteBreakpoints)
let g:WhichKeyDesc_debugging_mute = "<leader>dm Mute"
map <leader>dq <Action>(Stop)
let g:WhichKeyDesc_debugging_stop = "<leader>dq Stop"

let g:WhichKeyDesc_debugging_Shell = "<leader>dS JShell.Console"
nmap <leader>dS <Action>(JShell.Console)



""" Files --------------------------------
let g:WhichKeyDesc_files = "<leader>f Files"
let g:WhichKeyDesc_File_NewScratchBuffer = "<leader>fd new-scratch"
nmap <leader>fd    <Action>(NewScratchBuffer)
vmap <leader>fd    <Action>(NewScratchBuffer)

let g:WhichKeyDesc_File_RecentLocations = "<leader>fe recent-locations"
nmap <leader>fe    <Action>(RecentLocations)
vmap <leader>fe    <Action>(RecentLocations)

let g:WhichKeyDesc_File_GotoFile = "<leader>ff open-file"
nmap <leader>ff    <Action>(GotoFile)
vmap <leader>ff    <Action>(GotoFile)

let g:WhichKeyDesc_File_NewClass = "<leader>fn new-class"
nmap <leader>fn    <Action>(NewClass)
vmap <leader>fn    <Action>(NewClass)

let g:WhichKeyDesc_File_NewElement = "<leader>fn new-element"
nmap <leader>fN    <Action>(NewElement)
vmap <leader>fN    <Action>(NewElement)

let g:WhichKeyDesc_File_LocateInTree = "<leader>fl locate-file"
nmap <leader>fl    <Action>(SelectInProjectView)
vmap <leader>fl    <Action>(SelectInProjectView)

let g:WhichKeyDesc_File_LocateFileExplorer = "<leader>fL locate-file-explorer"
nmap <leader>fL    <Action>(RevealIn)
vmap <leader>fL    <Action>(RevealIn)

let g:WhichKeyDesc_File_RecentFiles = "<leader>fr recent-files"
nmap <leader>fr    <Action>(RecentFiles)
vmap <leader>fr    <Action>(RecentFiles)

let g:WhichKeyDesc_File_Rename = "<leader>fR rename-file"
nmap <leader>fR    <Action>(RenameFile)
vmap <leader>fR    <Action>(RenameFile)

let g:WhichKeyDesc_File_SaveDocument = "<leader>fs save-file"
nmap <leader>fs    <Action>(SaveDocument)
vmap <leader>fs    <Action>(SaveDocument)

let g:WhichKeyDesc_File_Switcher = "<leader>fw switcher"
nmap <leader>fw    <Action>(Switcher)
vmap <leader>fw    <Action>(Switcher)

let g:WhichKeyDesc_File_Close = "<leader>fx close-file"
nmap <leader>fx    <Action>(CloseEditor)
vmap <leader>fx    <Action>(CloseEditor)

let g:WhichKeyDesc_File_CloseAll = "<leader>fX close-all-files"
nmap <leader>fX    <Action>(CloseAllEditorsButActive)
vmap <leader>fX    <Action>(CloseAllEditorsButActive)

""" Run --------------------------------
let g:WhichKeyDesc_run = "<leader>r Run"
map <leader>rn <Action>(RunClass)
let g:WhichKeyDesc_run_class = "<leader>rn Run Class"
map <leader>rc <Action>(ChooseRunConfiguration)
let g:WhichKeyDesc_run_choose_run_configuration = "<leader>rc Run Configuration"
map <leader>rC <Action>(ChooseDebugConfiguration)
let g:WhichKeyDesc_run_choose_debug_configuration = "<leader>rC Debug Configuration"
map <leader>rs <Action>(Stop)
let g:WhichKeyDesc_run_stop = "<leader>rs Stop"
map <leader>rq <Action>(Stop)
let g:WhichKeyDesc_run_stop = "<leader>rq Stop"
map <leader>rr <Action>(Rerun)
let g:WhichKeyDesc_run_rerun = "<leader>rr Rerun"
map <leader>rd <Action>(DebugClass)
let g:WhichKeyDesc_run_debug = "<leader>rd Debug Nearest"
map <leader>rh <Action>(ImportTests)
let g:WhichKeyDesc_run_import_tests = "<leader>rh Test History"
map <leader>rm <Action>(RunMenu)
let g:WhichKeyDesc_run_menu = "<leader>rm Menu"
map <leader>rf <Action>(RerunFailedTests)
let g:WhichKeyDesc_run_failed = "<leader>rf Rerun Failed"
map <leader>rt <Action>(ActivateRunToolWindow)
let g:WhichKeyDesc_run_tool = "<leader>rf Tool"
map <leader>ra <Action>(RunAnything)
let g:WhichKeyDesc_run_tool = "<leader>ra Run Anything..."

""" View mode --------------------------------
let g:WhichKeyDesc_view = "<leader>v View"
map <leader>vc <Action>(ChangeView)
let g:WhichKeyDesc_view_change = "<leader>vc Change View"
map <leader>vf <Action>(ToggleFullScreen)
let g:WhichKeyDesc_view_fullscreen = "<leader>vc Full Screen"
map <leader>vo <Action>(HideAllWindows)
let g:WhichKeyDesc_view_only_window = "<leader>vo Hide all Windows"
map <leader>vm <Action>(ViewMenu)
let g:WhichKeyDesc_view_menu = "<leader>vm Menu"
map <leader>vp <Action>(TogglePresentationMode)
let g:WhichKeyDesc_view_presentation = "<leader>vm Presentation Mode"
map <leader>vv <Action>(ToggleDistractionFreeMode)
let g:WhichKeyDesc_view_distraction = "<leader>vv Distraction Mode"
map <leader>vx <Action>(Unsplit)
let g:WhichKeyDesc_view_unsplit = "<leader>vx Unsplit"
map <leader>vX <Action>(UnsplitAll)
let g:WhichKeyDesc_view_unsplit_all = "<leader>vX UnsplitAll"

map <C-z> <Action>(ToggleDistractionFreeMode)

""" Git --------------------------------
let g:WhichKeyDesc_git = "<leader>g Git"
map <leader>gg <Action>(CheckinProject)
let g:WhichKeyDesc_git_checkin = "<leader>gg Checkin"
map <leader>gc <Action>(Git.Branches)
let g:WhichKeyDesc_git_branches = "<leader>gc Branches"
map <leader>gp <Action>(Git.Commit.And.Push.Executor)
let g:WhichKeyDesc_git_commit_and_push = "<leader>gp Commit & Push"
map <leader>gP <Action>(Vcs.Push)
let g:WhichKeyDesc_git_push = "<leader>gP Push"
map <leader>gm <Action>(VcsGroups)
let g:WhichKeyDesc_git_menu = "<leader>gm Menu"
map <leader>gf <Action>(Git.Fetch)
let g:WhichKeyDesc_git_fetch = "<leader>gf Fetch"
map <leader>ga <Action>(Annotate)
let g:WhichKeyDesc_git_annotate = "<leader>ga Annotate"
map <leader>gl <Action>(ActivateVersionControlToolWindow)
let g:WhichKeyDesc_git_log = "<leader>gl Log"
map <leader>gt <Action>(ActivateVersionControlToolWindow)
let g:WhichKeyDesc_git_tool = "<leader>gt Tool"
map <leader>gr <Action>(Vcs.RollbackChangedLines)
let g:WhichKeyDesc_git_rollback_changed_lines = "<leader>gr Rollback"
map <leader>go <Action>(Github.View.Pull.Request)
let g:WhichKeyDesc_git_open_pull_requests = "<leader>go Open Pull Requests"

""" Search --------------------------------
let g:WhichKeyDesc_search = "<leader>s Search"
map <leader>se <Action>(SearchEverywhere)
let g:WhichKeyDesc_search_everywhere = "<leader>se Everywhere"
map <leader>sr <Action>(RecentFiles)
let g:WhichKeyDesc_search_recent_files = "<leader>sr Recent Files"
map <leader>sc <Action>(GotoClass)
let g:WhichKeyDesc_search_class = "<leader>sc Class"
map <leader>sf <Action>(GotoFile)
let g:WhichKeyDesc_search_files = "<leader>sf Files"
map <leader>ss <Action>(GotoSymbol)
let g:WhichKeyDesc_search_symbols = "<leader>ss Symbols"
map <leader>sa <Action>(GotoAction)
let g:WhichKeyDesc_search_action = "<leader>sa Action"
map <leader>st <Action>(FindInPath)
let g:WhichKeyDesc_search_in_path = "<leader>st In Path"
map <leader>su <Action>(FindUsages)
let g:WhichKeyDesc_search_usages = "<leader>suUsages"
map <leader>sp <Action>(RecentProjectListGroup)
let g:WhichKeyDesc_search_projects = "<leader>sp Usages"
map <leader>sR <Action>(ReplaceInPath)
let g:WhichKeyDesc_search_replace = "<leader>sR Replace"

" Registers
nmap <leader>s" :registers<cr>

" Jump to Mark
nmap <leader>sm :marks<cr>

""" Language --------------------------------
let g:WhichKeyDesc_language = "<leader>l Language"
map <leader>lm <Action>(Refactorings.QuickListPopupAction)
let g:WhichKeyDesc_language_menu = "<leader>lm Menu"
map <leader>lr <Action>(RenameElement)
let g:WhichKeyDesc_language_rename = "<leader>lr Rename"
map <leader>lR <Action>(RenameFile)
let g:WhichKeyDesc_language_rename_file = "<leader>lR Rename File"
map <leader>lc <Action>(ChangeSignature)
let g:WhichKeyDesc_language_change_signature = "<leader>lc Change Signature"
map <leader>lv <Action>(IntroduceVariable)
let g:WhichKeyDesc_language_introduce_variable = "<leader>lv Introduce Variable"
map <leader>li <Action>(Inline)
let g:WhichKeyDesc_language_extract_method = "<leader>lx Extract Method"
map <leader>lx <Action>(ExtractMethod)
let g:WhichKeyDesc_language_inline = "<leader>li Inline"
map <leader>lf <Action>(ReformatCode)<Action>(SilentCodeCleanup)
let g:WhichKeyDesc_language_reformat = "<leader>lf Format"

""" Applications  --------------------------------
let g:WhichKeyDesc_Applications = "<leader>a Applications"

" Plugins screen
let g:WhichKeyDesc_Applications_Plugins = "<leader>ak plugins"
nmap <leader>ak    <Action>(WelcomeScreen.Plugins)
vmap <leader>ak    <Action>(WelcomeScreen.Plugins)

" Show TODOs
let g:WhichKeyDesc_Applications_Org = "<leader>ao +org"
let g:WhichKeyDesc_Applications_Org_Todo = "<leader>aot todo"
nmap <leader>aot    <Action>(ActivateTODOToolWindow)
vmap <leader>aot    <Action>(ActivateTODOToolWindow)

" Show cpu usage
let g:WhichKeyDesc_Applications_ActivityMonitor = "<leader>aP activity-monitor"
nmap <leader>aP    <Action>(Performance.ActivityMonitor)
vmap <leader>aP    <Action>(Performance.ActivityMonitor)

" List processes
let g:WhichKeyDesc_Applications_Processes = "<leader>ap processes"
nmap <leader>ap    <Action>(ShowProcessWindow)
vmap <leader>ap    <Action>(ShowProcessWindow)

" Open a new terminal window
let g:WhichKeyDesc_Applications_Shell = "<leader>as shell"
nmap <leader>as    <Action>(Terminal.OpenInTerminal)
vmap <leader>as    <Action>(Terminal.OpenInTerminal)

""" Applications Tools --------------------------------
let g:WhichKeyDesc_Applications_tools = "<leader>at Tools"
map <leader>atm <Action>(ToolWindowsGroup)
let g:WhichKeyDesc_Applications_tools_menu = "<leader>atm Menu"
map <leader>atr <Action>(ActivateRunToolWindow)
let g:WhichKeyDesc_Applications_tools_run = "<leader>atr Run"
map <leader>atf <Action>(ActivateFindToolWindow)
let g:WhichKeyDesc_Applications_tools_find = "<leader>atf Find"
map <leader>atc <Action>(ActivateCommitToolWindow)
let g:WhichKeyDesc_Applications_tools_commit = "<leader>atc Commit"
map <leader>atd <Action>(ActivateDebugToolWindow)
let g:WhichKeyDesc_Applications_tools_debug = "<leader>atd Debug"
map <leader>atg <Action>(ActivateVersionControlToolWindow)
let g:WhichKeyDesc_Applications_tools_git = "<leader>atg Git"
map <leader>atp <Action>(ActivateProblemsViewToolWindow)
let g:WhichKeyDesc_Applications_tools_problems = "<leader>atp Problems Window"
map <leader>atT <Action>(ActivateTODOToolWindow)
let g:WhichKeyDesc_Applications_tools_todos = "<leader>atT Todos"
map <leader>att <Action>(ActivateTerminalToolWindow)
let g:WhichKeyDesc_Applications_tools_terminal = "<leader>att Terminal"
map <leader>atj <Action>(JsonPathEvaluateAction)
let g:WhichKeyDesc_Applications_tools_json_path = "<leader>atj Json Path Eval"

""" UI  --------------------------------
let g:WhichKeyDesc_UI = "<leader>u UI"
let g:WhichKeyDesc_UI_toggle_line_numbers = "<leader>ul Toggle Line Numbers"
nmap <leader>ul    <Action>(EditorToggleShowLineNumbers)
vmap <leader>ul    <Action>(EditorToggleShowLineNumbers)

let g:WhichKeyDesc_UI_toggle_relative_line_numbers = "<leader>uL Toggle Relative Line Numbers"
nnoremap <leader>uL    :set relativenumber!<CR>:set number<CR>
vnoremap <leader>uL    :set relativenumber!<CR>:set number<CR>

""" Config  --------------------------------
let g:WhichKeyDesc_config = "<leader>, Config"
map <leader>,a <Action>(VimFindActionIdAction)
let g:WhichKeyDesc_config_vim_actions = "<leader>,a Vim Toggle Action Id's"
map <leader>,v <Action>(VimPluginToggle)
let g:WhichKeyDesc_config_vim_toggle = "<leader>,v Toggle Vim"
map <leader>,e :edit ~/.config/ideavim/ideavimrc<CR>
let g:WhichKeyDesc_config_vim_edit = "<leader>,e Config edit"
map <leader>,r <Action>(IdeaVim.ReloadVimRc.reload)
let g:WhichKeyDesc_config_vim_reload = "<leader>,r Config reload"
map <leader>,c <Action>(ChangeColorScheme)
let g:WhichKeyDesc_config_change_color_scheme = "<leader>,c Change Color Scheme"
